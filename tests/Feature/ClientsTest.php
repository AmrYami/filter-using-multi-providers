<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ClientsTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed');
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testListClientsWithoutFilter()
    {
        $endPoint = 'api/v1/users';

        $user = User::factory()->create(['type' => 'merchant']);
        $response = $this->callApi($endPoint, $user->email);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "data" => [
                [
                    "balance",
                    "currency",
                    "email",
                    "status",
                    "created_at",
                    "id"
                ]
            ]
        ]);
    }

    public function testListClientsWithFilters()
    {
        $endPoint = 'api/v1/users?statusCode=authorised&balanceMin=10&balanceMax=280&provider=DataProviderX';

        $user = User::factory()->create(['type' => 'merchant']);
        $response = $this->callApi($endPoint, $user->email);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "data" => [
                [
                    "balance",
                    "currency",
                    "email",
                    "status",
                    "created_at",
                    "id"
                ]
            ]
        ]);
    }

    /**
     * Simulate call api
     *
     * @param string $endpoint
     * @param string $userMail
     *
     * @return mixed
     */
    protected function callApi($endpoint, $userMail)
    {
        $headers = [];
        if (!is_null($userMail)) {
            $token = auth()->guard('api')
                ->login(User::whereEmail($userMail)->first());
            $headers['Authorization'] = 'Bearer ' . $token;
        }
        return $this->getJson(
            $endpoint,
            $headers
        );
    }
}
